{"version":3,"file":"static/js/819.d41fae59.chunk.js","mappings":"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","sources":["redax/selectors.js","components/FormContact/FormContact.styled.jsx","components/FormContact/FormContact.js","components/ItemContact/ItemContact.styled.jsx","components/ItemContact/ItemContact.js","components/ListContact/ListContact.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/App.styled.jsx","pages/phonebook/Phonebook.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nexport const getContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getStatus = state => state.contacts.status;\nexport const getFilter = state => state.filter;\n\nexport const getFiltredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\nflex-direction: column;\nmax-width: 420px;\n  margin: 20px;\n  padding: 20px;\n  \n  background: #ede1f1;  \n  border: 8px double  #690f84;  \n`;\n\nexport const Lable = styled.label`\n    display: flex;\n    justify-content: space-between;\n    margin: 4px;\n    font-size: 24px;\n`\nexport const Input = styled.input`\n    font-size: 24px;\n`\nexport const Button = styled.button`\n    margin: 12px 4px 0;\n    padding: 4px;\n    font-size: 24px;\n    \n`","import { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redax/selectors';\nimport { nanoid } from 'nanoid';\nimport { fetchAddContact } from '../../redax/operations';\nimport { Form, Lable, Input, Button } from './FormContact.styled';\n\nexport default function FormContact() {\n  const contacts = useSelector(getContacts);  \n  const dispatch = useDispatch();\n\n  const resetInput = e => {\n    e.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value,\n    };\n    const findContact = contacts.find(\n      item => contact.name.toLowerCase() === item.name.toLowerCase()\n    );\n    if (findContact) {\n      return alert(`${contact.name} is already in contacts.`);\n    }\n    const findNumber = contacts.find(\n      item => contact.number.toLowerCase() === item.number.toLowerCase()\n    );\n    if (findNumber) {\n      return alert(`${contact.number} is already in use.`);\n    }\n    dispatch(fetchAddContact(contact));\n    e.currentTarget.reset();\n  };\n\n  return (\n    <Form onSubmit={resetInput}>\n      <Lable>\n        {' '}\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"          \n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Lable>\n\n      <Lable>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Number\"          \n          // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Lable>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Li = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n    width: 92px;\n    height: 32px;\n    \n    font-size: 16px;\n    \n`","import PropTypes from 'prop-types';\nimport { fetchDelContact } from 'redax/operations';\nimport { useDispatch } from 'react-redux';\nimport { Li, Button } from \"./ItemContact.styled\";\n\nexport const ItemContact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  \n  const onDeletContact = id => { dispatch(fetchDelContact(id)) };\n  return (\n    \n      <li key={id}>\n        <Li>\n      <p>\n        {name}: {number};\n      </p>\n      <Button type=\"button\" onClick={() => onDeletContact(id)}>\n        Delete\n        </Button>\n        </Li>\n      </li>\n      \n  );\n};\nItemContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  \n};","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ItemContact } from '../ItemContact/ItemContact';\nimport { getFiltredContacts } from '../../redax/selectors';\nimport { fetchContacts } from 'redax/operations';\n\nconst STATUS = {\n\tIDLE: 'idle',\n\tPENDING: 'pending',\n\tREJECTED: 'rejected',\n\tFULFILLED: 'fulfilled',\n} \n\nexport const ListContact = () => {\n  const {status, error} = useSelector((state) => state.contacts)  \n  const contactsFilter = useSelector(getFiltredContacts);\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    dispatch(fetchContacts()); \n}, [dispatch]);\n  \n  return (\n  <>\n    {status === STATUS.PENDING && (<div>\n\t\t\t\t<span >Loading...</span>\n      </div>)\n      }      \n      {(status === STATUS.FULFILLED && contactsFilter.length > 0) &&\n        (<ul>\n          {contactsFilter.map(({ id, name, number }) => (\n            <ItemContact key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>)}\n      {status === STATUS.REJECTED && alert(error)}      \n      </>\n  );\n};\n\nListContact.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeletContact: PropTypes.func,\n};","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    font-size: 24px;    \n`","import { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redax/selectors';\nimport { filterContacts } from 'redax/filterSlice';\nimport PropTypes from 'prop-types';\nimport { Input } from \"./Filter.styled\";\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);  \n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(filterContacts(e.currentTarget.value));    \n  }\n\n  return (\n      <>\n      <Input type=\"text\" name=\"filter\" placeholder=\"Filter\"  value={filter} onChange={changeFilter}  />\n      </>\n  );\n};\nFilter.propTypes = {\n  filter: PropTypes.string,\n  changeFilter: PropTypes.func,\n};","import styled from 'styled-components';\n\nexport const Conteiner = styled.div`\n  margin: 24px;   \n`;\nexport const Box = styled.div`\n  display: flex;\nflex-direction: column;\nmax-width: 420px;\n  margin: 20px;\n  padding: 20px;\n\n  font-size: 24px;\n  \n  background: #ede1f1;  \n  border: 8px double  #690f84;  \n`;","import  FormContact from '../../components/FormContact/FormContact';\nimport { ListContact } from '../../components/ListContact/ListContact';\nimport { Filter } from '../../components/Filter/Filter';\nimport { Conteiner, Box } from '../../components/App.styled';\nexport default function Phonebook() {\n \n    return (\n      <Conteiner>\n        <h1>Phonebook</h1>\n        <FormContact  />\n\n        <h2>Contacts</h2>\n        <Box>\n        <p>Find contacts by name</p>\n        <Filter />        \n        <ListContact />\n          </Box>\n      </Conteiner>\n    );\n  }\n"],"names":["getContacts","state","contacts","getFilter","filter","getFiltredContacts","createSelector","contact","name","toLowerCase","includes","Form","styled","_templateObject","_taggedTemplateLiteral","Lable","_templateObject2","Input","_templateObject3","Button","_templateObject4","FormContact","useSelector","dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","id","nanoid","currentTarget","elements","value","number","find","item","alert","concat","fetchAddContact","reset","children","_jsx","type","placeholder","title","required","Li","ItemContact","_ref","onClick","fetchDelContact","onDeletContact","STATUS","ListContact","_useSelector","status","error","contactsFilter","useEffect","fetchContacts","_Fragment","length","map","Filter","onChange","filterContacts","Conteiner","Box","Phonebook"],"sourceRoot":""}